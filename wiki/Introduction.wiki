#labels Featured,Phase-Design
This chapter presents the basic concepts used in our implementation of the parser.

To run our scripts, you will need working Linux environment, Python (minimum
v 2.4), GMTK (last available version) (http://ssli.ee.washington.edu/~bilmes/gmtk/) and envsubst command (on Debian
it is part of gettext-base package).

= Instalation =

Checkout the project into your home directory. The name of the directory for the extended HVS parser should be `extended-HVS-parser`.
{{{
svn checkout https://extended-hidden-vector-state-parser.googlecode.com/svn/trunk extended-HVS-parser --username YOUR-USER-NAME
}}}
or
{{{
svn checkout http://extended-hidden-vector-state-parser.googlecode.com/svn/trunk extended-HVS-parser
}}}

= Full run example =

Go to the directory "~/extended-HVS-parser/semantics-4":
{{{
cd ~/extended-HVS-parser/semantics-4
}}}

Run command from the bash command line:
{{{
./semantics.py runbatch --verbose-level DEBUG --script ./batch/full_run_example.py
}}}

You should see the following output:
{{{
Running external method SemanticsMain.makeDirs ('bin/semantics/makeDirs')
Running external method SemanticsMain.deleteTmpData ('bin/semantics/deleteTmpData')
Running external method SemanticsMain.setCommonParams ('bin/semantics/setCommonParams')
Running external method SemanticsMain.copyXMLData ('bin/semantics/copyXMLData')
Running external method SemanticsMain.genInputMaps ('bin/semantics/genInputMaps')
Running external method SemanticsMain.genInputs ('bin/semantics/genInputs')
Running external method SemanticsMain.genHiddenObservation ('bin/semantics/genHiddenObservation')
Running external method SemanticsMain.genEndOfUtteranceObservation ('bin/semantics/genEndOfUtteranceObservation')
Running external method SemanticsMain.initSemanticModel ('bin/semantics/initSemanticModel')
Running external method SemanticsMain.initLexicalModel ('bin/semantics/initLexicalModel')
Running external method SemanticsMain.triangulate ('bin/semantics/triangulate')
}}}


=== Error 1 ===

If you see:

{{{
Traceback (most recent call last):
  File "./semantics.py", line 6, in ?
    from svc.utils import cartezian as _cartezianProduct, strnumber, strcomma
ImportError: No module named svc.utils
}}}

than you have to add into you .bashrc file or you have to modify external variable:
`export PYTHONPATH=$PYTHONPATH:~/extended-HVS-parser` 

=== Error 2 ===

If you see:

{{{
SemanticsMain.copyXMLData: Traceback (most recent call last):
SemanticsMain.copyXMLData:   File "/home/filip/extended-HVS-parser/semantics-4/src/copyXML2DataRaw.py", line 270, in ?
SemanticsMain.copyXMLData:     trainList, heldoutList, testList = loadLists(dirIn)
SemanticsMain.copyXMLData:   File "/home/filip/extended-HVS-parser/semantics-4/src/copyXML2DataRaw.py", line 149, in loadLists
SemanticsMain.copyXMLData:     trainList = readXMLsAppendDate(dirIn + "/.train.list")
SemanticsMain.copyXMLData:   File "/home/filip/extended-HVS-parser/semantics-4/src/copyXML2DataRaw.py", line 92, in readXMLsAppendDate
SemanticsMain.copyXMLData:     ff = open(fName, "r")
SemanticsMain.copyXMLData: IOError: [Errno 2] No such file or directory: 'data_xml/.train.list'
Script SemanticsMain: ExternalError: External method copyXMLData ('bin/semantics/copyXMLData') returned with nonzero exit status (1)
}}}

than you are missing the input XML data in the directory DATA_DIR. Original setting is `example-data` which results into `~/extended-HVS-parser/example-data`. The directory DATA_DIR is possible to set in the file [settingsPath settings.path].

=== Error 3 ===

If you see:

{{{
SemanticsMain.triangulate: bin/semantics/triangulate: line 4: gmtkTriangulate: command not found
SemanticsMain.triangulate: bin/semantics/triangulate: line 10: gmtkTriangulate: command not found
Script SemanticsMain: ExternalError: External method triangulate ('bin/semantics/triangulate') returned with nonzero exit status (127)
}}}

than the scripts can not access the GMTK binary files. Add path to the GMTK binary files into the PATH variable:
{{{
export PATH=$PATH:$HOME/..your-path-to-GMTK../gmtk/bin
}}}

For example:
{{{
export PATH=$PATH:$HOME/bin-speech/gmtk/bin
}}}


= Special words = 

== `_unseen_` == 


= Special Concepts = 

== `_EMPTY_` ==
a value in the hidden vector state which represents an empty stack at given position.

== `_DUMMY_` == 
a value in the hidden vector state which represents

== `_SINK_` == 
the concept is used as an error assertion in the model. The concept is generated onto the stack any time, the hidden variables lead to inapproriate content on the stack. Later the [StackValidation stack validation] will dissable this HVS trasition sequence.